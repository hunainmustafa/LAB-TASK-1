This code implements two types of binary search trees: a regular Binary Search Tree (BST) and a self-balancing AVL Tree. Both trees allow insertion of integer values and use in-order traversal to print values in sorted order. In the BST, nodes are added based on comparison — left for smaller, right for larger — but no balancing is performed, which can lead to skewed trees. The AVL tree maintains balance by tracking the height of nodes and performing rotations (left, right, or both) when imbalance is detected (i.e., height difference between subtrees exceeds 1). The main() function tests both trees with the same values to show how the AVL tree stays balanced while the plain BST may not. This helps illustrate the advantage of AVL trees in maintaining optimal performance for search operations.
